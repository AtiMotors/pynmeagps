Metadata-Version: 2.1
Name: pynmea3
Version: 0.0.1
Summary: NMEA Protocol Parser
Home-page: https://github.com/semuconsulting/pynmea3
Author: semuadmin
Author-email: semuadmin@semuconsulting.com
License: BSD 3-Clause 'Modified' License
Project-URL: Bug Tracker, https://github.com/semuconsulting/pynmea3
Project-URL: Documentation, https://github.com/semuconsulting/pynmea3
Project-URL: Sphinx API Documentation, http://semuconsulting.com/pynmea3
Project-URL: Source Code, https://github.com/semuconsulting/pynmea3
Description: pynmea3
        =======
        
        `pynmea3` is an original lightweight Python library aimed specifically at the subset of the NMEA 0183 protocol relevant to GNSS/GPS devices - that is, NMEA 0183 messages beginning with '$G' (standard) or '$P' (proprietary).
        
        The intention is to make it as easy as possible to read, parse and utilise NMEA GNSS/GPS messages in Python applications, e.g. 
        * lat/lon positions are provided as signed decimal degrees rather than the raw NMEA format ddmmm.mmmmm.
        * date and time values are provided as datetime types.
        * integer and decimal values are provided as int or float types.
        * enumerated values are decoded where applicable.
        * message payloads are defined in easily-maintainable dictionaries.
        
        The `pynmea3` homepage is located at [http://github.com/semuconsulting/pynmea3](http://github.com/semuconsulting/pynmea3).
        
        **FYI** There is a companion library [pyubx2](http://github.com/semuconsulting/pyubx2), which handles u-blox UBX protocol GNSS/GPS messages.
        
        ### Current Status
        
        ![Status](https://img.shields.io/pypi/status/pynmea3)
        ![Release](https://img.shields.io/github/v/release/semuconsulting/pynmea3)
        ![Build](https://img.shields.io/github/workflow/status/semuconsulting/pynmea3/pynmea3)
        ![Codecov](https://img.shields.io/codecov/c/github/semuconsulting/pynmea3)
        ![Release Date](https://img.shields.io/github/release-date-pre/semuconsulting/pynmea3)
        ![Last Commit](https://img.shields.io/github/last-commit/semuconsulting/pynmea3)
        ![Contributors](https://img.shields.io/github/contributors/semuconsulting/pynmea3.svg)
        ![Open Issues](https://img.shields.io/github/issues-raw/semuconsulting/pynmea3)
        
        At time of writing the library implements a comprehensive set of GNSS NMEA messages relating to GNSS/GPS devices, but is readily [extensible](#extensibility). Refer to `NMEA_MSGIDS` in [nmeatypes_core.py](https://github.com/semuconsulting/pynmea3/blob/master/pynmea3/nmeatypes_core.py) for the complete dictionary of messages currently supported.
        
        Sphinx API Documentation in HTML format is available at [http://semuconsulting.com/pynmea3](http://semuconsulting.com/pynmea3).
        
        Contributions welcome - please refer to [CONTRIBUTING.MD](https://github.com/semuconsulting/pynmea3/blob/master/CONTRIBUTING.md).
        
        [Bug reports](https://github.com/semuconsulting/pynmea3/blob/master/.github/ISSUE_TEMPLATE/bug_report.md) and [Feature requests](https://github.com/semuconsulting/pynmea3/blob/master/.github/ISSUE_TEMPLATE/feature_request.md) - please use the templates provided.
        
        ## <a name="installation">Installation</a>
        
        `pynmea3` is compatible with Python 3.6+ and has no third-party library dependencies.
        
        In the following, `python` & `pip` refer to the python3 executables. You may need to type 
        `python3` or `pip3`, depending on your particular environment.
        
        ![Python version](https://img.shields.io/pypi/pyversions/pynmea3.svg?style=flat)
        [![PyPI version](https://img.shields.io/pypi/v/pynmea3.svg?style=flat)](https://pypi.org/project/pynmea3/)
        ![PyPI downloads](https://img.shields.io/pypi/dm/pynmea3.svg?style=flat)
        
        The recommended way to install the latest version of `pynmea3` is with
        [pip](http://pypi.python.org/pypi/pip/):
        
        ```shell
        python -m pip install --upgrade pynmea3
        ```
        
        If required, `pynmea3` can also be installed using virtualenv, e.g.:
        
        ```shell
        python -m pip install --user --upgrade virtualenv
        python -m virtualenv env
        source env/bin/activate (or env\Scripts\activate on Windows)
        (env) python -m pip install --upgrade pynmea3
        ...
        deactivate
        ```
        
        
        ## Reading (Streaming)
        
        You can create an `NMEAReader` object by calling the constructor with an active stream object. 
        The stream object can be any data stream which supports a `read(n) -> bytes` method (e.g. File or Serial, with 
        or without a buffer wrapper).
        
        Individual input NMEA messages can then be read using the `NMEAReader.read()` function, which returns both the raw binary
        data (as bytes) and the parsed data (as an `NMEAMessage` object). The function is thread-safe in so far as the incoming
        data stream object is thread-safe. `NMEAReader` also implements an iterator.
        
        The `NMEAReader` constructor includes an optional `nmea_only` flag which governs behaviour if the stream includes non-NMEA data (e.g. proprietary UBX or Garmin data). If set to 'False' (the default), it will ignore such data and continue with the next valid NMEA message. If set to 'True', it will raise a `NMEAStreamError`. **NB:** if the `nmea_only` flag is set to 'False', the `NMEAReader.read()` function will block until it receives a NMEA message (or the input stream times out).
        
        Examples:
        
        * Serial input - this example will ignore any non-NMEA data.
        
        ```python
        >>> from serial import Serial
        >>> from pynmea3 import NMEAReader
        >>> stream = Serial('/dev/tty.usbmodem14101', 9600, timeout=3)
        >>> nmr = NMEAReader(stream)
        >>> (raw_data, parsed_data) = nmr.read()
        ```
        
        * File input (using iterator) - this example will produce a `NMEAStreamError` if non-NMEA data is encountered.
        
        ```python
        >>> from pynmea3 import NMEAReader
        >>> stream = open('nmeadata.log', 'rb')
        >>> nmr = MEAReader(stream, True)
        >>> for (raw_data, parsed_data) in nmr: print(parsed_data)
        ...
        ```
        
        ## Parsing
        
        You can parse individual UBX messages using the static `NMEAReader.parse(data, validate=False)` function, which takes a bytes array containing a binary UBX message and returns a `NMEAMessage` object.
        
        If the optional 'validate' parameter is set to `True`, `parse` will validate the supplied NMEA checksum. 
        If this is not consistent with the message content, it will raise a `NMEAParseError`.
        
        Example:
        
        ```python
        >>> from pynmea3 import NMEAReader
        >>> msg = NMEAReader.parse(b'\xb5b\x05\x01\x02\x00\x06\x01\x0f\x38', True)
        >>> print(msg)
        <UBX(ACK-ACK, clsID=CFG, msgID=CFG-MSG)>
        >>> msg = NMEAReader.parse(b'\xb5b\x01\x12$\x000D\n\x18\xfd\xff\xff\xff\xf1\xff\xff\xff\xfc\xff\xff\xff\x10\x00\x00\x00\x0f\x00\x00\x00\x83\xf5\x01\x00A\x00\x00\x00\xf0\xdfz\x00\xd0\xa6')
        >>> print(msg)
        <UBX(NAV-VELNED, iTOW=16:01:50, velN=-3, velE=-15, velD=-4, speed=16, gSpeed=15, heading=128387, sAcc=65, cAcc=8052720)>
        ```
        
        The `NMEAMessage` object exposes different public properties depending on its message type or 'identity',
        e.g. the `GGA` message has the following properties:
        
        ```python
        >>> print(msg)
        <UBX(NAV-POSLLH, iTOW=16:01:54, lon=-21601284, lat=526206345, height=86327, hMSL=37844, hAcc=38885, vAcc=16557)>
        >>> msg.identity
        'NAV-POSLLH'
        >>> msg.lat/10**7, msg.lon/10**7
        (52.6206345, -2.1601284)
        >>> msg.hMSL/10**3
        37.844
        ```
        
        ## Generating
        
        You can create an `NMEAMessage` object by calling the constructor with the following parameters:
        1. talker (must be a valid talker from `pynmea3.NMEA_TALKERS`, or blank for proprietary messages)
        1. message id (must be a valid id from `pynmea3.NMEA_MSGIDS`)
        2. mode (0=GET, 1=SET, 2=POLL)
        3. (optional) a series of keyword parameters representing the message payload
        
        The message payload can be defined via keyword parameters in one of three ways:
        1. A single keyword parameter of `payload` containing the full payload as a list of string values (any other keyword parameters will be ignored).
        2. One or more keyword parameters corresponding to individual message attributes. Any attributes not explicitly provided as keyword
        parameters will be set to a nominal value according to their type.
        3. If no keyword parameters are passed, the payload is assumed to be null.
        
        e.g. to generate a GNGGA message:
        
        ```python
        >>> from pynmea3 import NMEAMessage, GET
        >>> msg = NMEAMessage("GN", "GGA", GET, payload=["???","???","???","???","???",])
        >>> print(msg)
        <NMEA(GNGGA, ?????????????????????????????????????????????)>
        ```
        
        **NB:** Once instantiated, an `NMEAMessage` object is immutable.
        
        ### Serializing
        
        The `NMEAMessage` class implements a `serialize()` method to convert a `NMEAMessage` object to a bytes array suitable for writing to an output stream.
        
        ```python
        >>> from pynmea3 import NMEAMessage, POLL
        >>> msg = NMEAMessage("GN",'GLL', POLL, ???=???,???=???)
        >>> msg.serialize()
        ???????????????????????????????????????????????????????
        ```
        
        ## Examples
        
        The following examples can be found in the `\examples` folder:
        
        1. `nmeastreamer.py` illustrates how to implement a threaded serial reader for NMEA messages using pynmea3.NMEAReader. 
        
        1. `nmeafile.py` illustrates how to implement a binary file reader for UBX messages using the pynmea3.NMEAReader iterator function. 
        
        1. `nmeadump.py` is a simple command line utility to stream the parsed NMEA output of a GNSS/GPS device on a specified port.
        
        
        ## <a name="extensibility">Extensibility</a>
        
        The UBX protocol is principally defined in the modules `nmeatypes_*.py` as a series of dictionaries. Additional message types 
        can be readily added to the appropriate dictionary. Message payload definitions must conform to the following rules:
        
        ```
        1. attribute names must be unique within each message class
        2. attribute types must be one of the valid types (IN, DE, CH, etc.)
        3. repeating groups must be defined as a tuple ('numr', {dict}), where:
           'numr' is either:
             a. an integer representing a fixed number of repeats e.g. 32
             b. a string representing the name of a preceding attribute containing the number of repeats e.g. 'numSv'
             c. 'None' for an indeterminate repeating group. Only one such group is permitted per payload and it must be at the end.
           {dict} is the nested dictionary of repeating items
        
        ## Graphical Client
        
        A python/tkinter graphical GPS client which supports both NMEA and UBX protocols is available at: 
        
        [http://github.com/semuconsulting/PyGPSClient](http://github.com/semuconsulting/PyGPSClient)
        
        ## Author Information
        
        ![License](https://img.shields.io/github/license/semuconsulting/pynmea3.svg)
        
        semuadmin@semuconsulting.com
         
        
Keywords: pynmea3 GNSS GPS GLONASS NMEA GIS
Platform: Windows
Platform: MacOS
Platform: Linux
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: MacOS X
Classifier: Environment :: Win32 (MS Windows)
Classifier: Environment :: X11 Applications
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: End Users/Desktop
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: License :: OSI Approved :: BSD License
Classifier: Topic :: Utilities
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Scientific/Engineering :: GIS
Requires-Python: >=3.6
Description-Content-Type: text/markdown
